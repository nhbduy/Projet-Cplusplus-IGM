.TH "Conditionnel" 3 "Tue Apr 12 2016" "Projet-Cplusplus-IGM" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Conditionnel \- La classe \fBConditionnel\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <conditionnel\&.h>\fP
.PP
Inherits \fBExpression\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBConditionnel\fP ()"
.br
.RI "\fIConstructeur\&. \fP"
.ti -1c
.RI "\fBConditionnel\fP (\fBBinaire\fP *, \fBExpression\fP *, \fBExpression\fP *)"
.br
.RI "\fIConstructeur\&. \fP"
.ti -1c
.RI "virtual \fB~Conditionnel\fP ()"
.br
.RI "\fIDestructeur Destructeur de la classe \fBAffectation\fP\&. \fP"
.ti -1c
.RI "\fBExpression\fP * \fBclone\fP () const "
.br
.RI "\fIclone l'expression Methode qui permet de cloner l'expression \fP"
.ti -1c
.RI "string \fBafficher\fP () const "
.br
.RI "\fIAffiche l'expression Methode qui permet d'afficher l'expression\&. \fP"
.ti -1c
.RI "double \fBeval\fP () const "
.br
.RI "\fIEvalue l'expression Methode qui permet d'evaluer l'expression\&. \fP"
.ti -1c
.RI "\fBExpression\fP * \fBderiver\fP (const string &)"
.br
.RI "\fIDerive l'expression* Methode qui permet deriver l'expression\&. \fP"
.ti -1c
.RI "\fBExpression\fP * \fBsimplifier\fP ()"
.br
.RI "\fISimplifie l'expression Methode qui permet de simplifier l'expression\&. \fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBConditionnel\fP &)"
.br
.RI "\fIoperator<< Methode qui permet d'afficher l'expression \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
La classe \fBConditionnel\fP\&. 

Cette classe représente les opérateurs ternaire\&. Elles permettent d'obtenir une valeur si une condition est vraie, et une autre si la condition est fausse\&. Ils ont de forme : (cond)?e1:e2 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Conditionnel::Conditionnel ()"

.PP
Constructeur\&. Constructeur de la classe \fBConditionnel\fP 
.SS "Conditionnel::Conditionnel (\fBBinaire\fP * cond, \fBExpression\fP * exp1, \fBExpression\fP * exp2)"

.PP
Constructeur\&. Constructeur de la classe \fBConditionnel\fP
.PP
\fBParameters:\fP
.RS 4
\fIcond\fP : la condition 
.br
\fIexp1\fP : l'expression si la condition est vraie 
.br
\fIexp2\fP : l'expression si la condition est fausse 
.RE
.PP

.SS "Conditionnel::~Conditionnel ()\fC [virtual]\fP"

.PP
Destructeur Destructeur de la classe \fBAffectation\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "string Conditionnel::afficher () const\fC [virtual]\fP"

.PP
Affiche l'expression Methode qui permet d'afficher l'expression\&. 
.PP
\fBReturns:\fP
.RS 4
Le string d'expression 
.RE
.PP

.PP
Reimplemented from \fBExpression\fP\&.
.SS "\fBExpression\fP * Conditionnel::clone () const\fC [virtual]\fP"

.PP
clone l'expression Methode qui permet de cloner l'expression 
.PP
\fBReturns:\fP
.RS 4
L'expression cloné 
.RE
.PP

.PP
Implements \fBExpression\fP\&.
.SS "\fBExpression\fP * Conditionnel::deriver (const string & var)\fC [virtual]\fP"

.PP
Derive l'expression* Methode qui permet deriver l'expression\&. 
.PP
\fBReturns:\fP
.RS 4
L'expression derivé 
.RE
.PP

.PP
Implements \fBExpression\fP\&.
.SS "double Conditionnel::eval () const\fC [virtual]\fP"

.PP
Evalue l'expression Methode qui permet d'evaluer l'expression\&. 
.PP
\fBReturns:\fP
.RS 4
Le valeur d'expression 
.RE
.PP

.PP
Implements \fBExpression\fP\&.
.SS "\fBExpression\fP * Conditionnel::simplifier ()\fC [virtual]\fP"

.PP
Simplifie l'expression Methode qui permet de simplifier l'expression\&. 
.PP
\fBReturns:\fP
.RS 4
L'expression simplifié 
.RE
.PP

.PP
Implements \fBExpression\fP\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "ostream& operator<< (ostream & os, const \fBConditionnel\fP & conditionnel)\fC [friend]\fP"

.PP
operator<< Methode qui permet d'afficher l'expression 

.SH "Author"
.PP 
Generated automatically by Doxygen for Projet-Cplusplus-IGM from the source code\&.
